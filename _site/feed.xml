<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.1">Jekyll</generator><link href="http://0.0.0.0:8080/feed.xml" rel="self" type="application/atom+xml" /><link href="http://0.0.0.0:8080/" rel="alternate" type="text/html" /><updated>2018-10-23T18:03:48+08:00</updated><id>http://0.0.0.0:8080/</id><title type="html">一名安静的程序员</title><subtitle>浮躁的社会，浮躁的我</subtitle><author><name>true</name></author><entry><title type="html">java复习手册</title><link href="http://0.0.0.0:8080/2018/10/23/Java%E5%A4%8D%E4%B9%A0%E6%89%8B%E5%86%8C.html" rel="alternate" type="text/html" title="java复习手册" /><published>2018-10-23T00:00:00+08:00</published><updated>2018-10-23T00:00:00+08:00</updated><id>http://0.0.0.0:8080/2018/10/23/Java%E5%A4%8D%E4%B9%A0%E6%89%8B%E5%86%8C</id><content type="html" xml:base="http://0.0.0.0:8080/2018/10/23/Java%E5%A4%8D%E4%B9%A0%E6%89%8B%E5%86%8C.html">&lt;h1 id=&quot;java复习手册&quot;&gt;java复习手册&lt;/h1&gt;

&lt;p&gt;@(工作)[基本功, 集合, 线程, 锁机制, 数据存储, 缓存, 消息队列]&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;[TOC]&lt;/p&gt;

&lt;h2 id=&quot;基本功&quot;&gt;基本功&lt;/h2&gt;
&lt;h3 id=&quot;面向对象的特征&quot;&gt;面向对象的特征&lt;/h3&gt;
&lt;h4 id=&quot;封装&quot;&gt;封装&lt;/h4&gt;
&lt;h5 id=&quot;概念&quot;&gt;概念&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;将类的信息隐藏在类内部,不允许外部程序直接访问&lt;/li&gt;
  &lt;li&gt;通过该类提供的方法在实现对隐藏信息的操作和访问&lt;/li&gt;
  &lt;li&gt;隐藏对象的信息&lt;/li&gt;
  &lt;li&gt;留出访问的接口
    &lt;h5 id=&quot;代码实现&quot;&gt;代码实现&lt;/h5&gt;
  &lt;/li&gt;
  &lt;li&gt;属性前+private访问修饰符:该属性只能在当前类内部访问&lt;/li&gt;
  &lt;li&gt;在类外对private属性访问需要:创建getter/setter操作接口取值和赋值&lt;/li&gt;
  &lt;li&gt;eclipse自动生成get/set方法：右键，source-&amp;gt;generate getters and setters&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://img-blog.csdn.net/20171013104612318&quot; alt=&quot;enter image description here&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;继承&quot;&gt;继承&lt;/h4&gt;
&lt;h5 id=&quot;概念-1&quot;&gt;概念&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;继承即常说的is-a的关系。子类继承父类，表明子类是一种特殊的父类，并且具有父类所没有的一些属性和方法。
    &lt;h5 id=&quot;特点&quot;&gt;特点&lt;/h5&gt;
  &lt;/li&gt;
  &lt;li&gt;子类拥有父类非private的属性和方法&lt;/li&gt;
  &lt;li&gt;子类可以拥有自己的属性和方法，即子类可以对父类进行扩展&lt;/li&gt;
  &lt;li&gt;子类可以用自己的方式实现父类的方法&lt;/li&gt;
  &lt;li&gt;对于构造器而言，子类会默认调用父类的构造器，但是如果没有默认的父类构造器，子类必须要显示的指定父类的构造器，而且必须是在子类构造器中做的第一件事(第一行代码)：super()&lt;/li&gt;
  &lt;li&gt;将子类转换成父类，在继承关系上面是向上移动的，所以一般称之为向上转型
    &lt;h5 id=&quot;慎用继承&quot;&gt;慎用继承&lt;/h5&gt;
  &lt;/li&gt;
  &lt;li&gt;父类变，子类就必须变&lt;/li&gt;
  &lt;li&gt;继承破坏了封装，对于父类而言，它的实现细节对于子类来说都是透明的&lt;/li&gt;
  &lt;li&gt;继承是一种强耦合关系&lt;/li&gt;
  &lt;li&gt;那么到底要不要使用继承呢？《Think in java》中提供了解决办法：问一问自己是否需要从子类向父类进行向上转型。如果必须向上转型，则继承是必要的，但是如果不需要，则应当好好考虑自己是否需要继承。
    &lt;h4 id=&quot;多态&quot;&gt;多态&lt;/h4&gt;
    &lt;h5 id=&quot;概念-2&quot;&gt;概念&lt;/h5&gt;
    &lt;p&gt;多态是同一个行为具有多个不同表现形式。ps：封装和继承都是为多态而准备的&lt;/p&gt;
    &lt;h5 id=&quot;两种多态&quot;&gt;两种多态&lt;/h5&gt;
  &lt;/li&gt;
  &lt;li&gt;编译时多态：方法的重载;&lt;/li&gt;
  &lt;li&gt;运行时多态：JAVA运行时系统根据该方法的实例的类型来决定调用哪个方法则被称为运行时多态,同一个接口，使用不同的实例而执行不同操作，如图所示：&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;./1536820160013.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;运行时多态的作用&quot;&gt;运行时多态的作用&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;消除类型之间的耦合关系(简单地说就是，没有多态，那么等号左边是啥右边就得是啥，这就叫耦合，有了多态，左边是父类（或者接口），右边是子类（或实现类），我只管调用接口里面的方法就是了，至于你实现类怎么去实现，那是你的事，你要修改一下实现，你只管去把实现类换掉，我这边一行代码都不用变，这就解耦了)
    &lt;h5 id=&quot;多态的好处&quot;&gt;多态的好处&lt;/h5&gt;
  &lt;/li&gt;
  &lt;li&gt;可替换性&lt;/li&gt;
  &lt;li&gt;可扩充性&lt;/li&gt;
  &lt;li&gt;接口性&lt;/li&gt;
  &lt;li&gt;灵活性&lt;/li&gt;
  &lt;li&gt;简化性
    &lt;h5 id=&quot;存在多态的必要条件&quot;&gt;存在多态的必要条件&lt;/h5&gt;
  &lt;/li&gt;
  &lt;li&gt;继承&lt;/li&gt;
  &lt;li&gt;重写
    &lt;h3 id=&quot;finalfinallyfinalize的区别&quot;&gt;final,finally,finalize的区别&lt;/h3&gt;
    &lt;h4 id=&quot;final&quot;&gt;final&lt;/h4&gt;
  &lt;/li&gt;
  &lt;li&gt;final修饰符,也是关键字。&lt;/li&gt;
  &lt;li&gt;修饰的类不能被继承&lt;/li&gt;
  &lt;li&gt;修饰的变量或者方法在使用的过程中不被修改(如果修饰引用类型，那么引用的对象是可以被修改的,引用本身不可修改)、被覆盖（类中所有的private方法都隐式的指定为final。）
    &lt;h4 id=&quot;finally&quot;&gt;finally&lt;/h4&gt;
    &lt;p&gt;-异常块儿中无论异常是否捕获，都一定会发生的代码块儿.&lt;/p&gt;
    &lt;h4 id=&quot;finallieze&quot;&gt;finallieze&lt;/h4&gt;
    &lt;p&gt;-jvm清理某个对象时会触发的一个方法。&lt;/p&gt;
    &lt;h3 id=&quot;int-和-integer-有什么区别&quot;&gt;int 和 Integer 有什么区别&lt;/h3&gt;
  &lt;/li&gt;
  &lt;li&gt;int是原始类型,Integer是包装类型,是个对象&lt;/li&gt;
  &lt;li&gt;int初始化0；Integer初始化null&lt;/li&gt;
  &lt;li&gt;无论如何，Integer与new Integer()不会相等&lt;/li&gt;
  &lt;li&gt;两个都是非new出来的Integer，如果数在-128到127之间，则是true,否则为false&lt;/li&gt;
  &lt;li&gt;int和integer(无论new否)比，都为true，因为会把Integer自动拆箱为int再去比
    &lt;h3 id=&quot;重载和重写的区别&quot;&gt;重载和重写的区别&lt;/h3&gt;
  &lt;/li&gt;
  &lt;li&gt;重载是在同一个类中的两个或两个以上的方法，拥有相同的方法名，但是参数却不相同，方法体也不相同，最常见的重载的例子就是类的构造函数&lt;/li&gt;
  &lt;li&gt;重写发生在两个类中，在子类中把父类本身有的方法重新写一遍。
    &lt;h3 id=&quot;抽象类和接口有什么区别&quot;&gt;抽象类和接口有什么区别&lt;/h3&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;|参数|抽象类|接口|
|:—–| :—–| :—– |
| 默认的方法实现| 它可以有默认的方法实现|接口完全是抽象的。它根本不存在方法的实现   |
| 实现|子类使用extends关键字来继承抽象类。如果子类不是抽象类的话，它需要提供抽象类中所有声明的方法的实现。|子类使用关键字implements来实现接口。它需要提供接口中所有声明的方法的实现|
| 构造器|抽象类可以有构造器|接口不能有构造器|
|与正常java类的区别|除了不能实例化抽象类之外没有任何区别|接口是完全不同的类型|
|访问修饰符|抽象方法可以有&lt;strong&gt;public&lt;/strong&gt;、&lt;strong&gt;protected&lt;/strong&gt;和&lt;strong&gt;default&lt;/strong&gt;,&lt;strong&gt;private&lt;/strong&gt;修饰后子类看不到啊。|接口默认修饰符是&lt;strong&gt;public&lt;/strong&gt;,你不可以使用其他修饰符抱歉！|
|main方法|抽象方法可以有main方法并且我们可以运行它|	接口没有main方法，因此我们不能运行它|
|多继承|抽象方法可以继承一个类和实现多个接口|接口只可以继承一个或多个其它接口|
|速度|它比接口速度要快|接口是稍微有点慢的，因为它需要时间去寻找在类中实现的方法。|
|添加新方法|如果你往抽象类中添加新的方法，你可以给它提供默认的实现。因此你不需要改变你现在的代码。|如果你往接口中添加方法，那么你必须改变实现该接口的类。|&lt;/p&gt;
&lt;h4 id=&quot;什么时候使用抽象类或者接口&quot;&gt;什么时候使用抽象类或者接口?&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;如果你拥有一些方法并且想让它们中的一些有默认实现，那么使用抽象类吧。&lt;/li&gt;
  &lt;li&gt;如果你想实现多重继承，那么你必须使用接口。由于Java不支持多继承，子类不能够继承多个类，但可以实现多个接口。因此你就可以使用接口来解决它。&lt;/li&gt;
  &lt;li&gt;如果基本功能在不断改变，那么就需要使用抽象类。如果不断改变基本功能并且使用接口，那么就需要改变所有实现了该接口的类。
    &lt;h4 id=&quot;jdk8接口增强&quot;&gt;JDK8接口增强&lt;/h4&gt;
    &lt;p&gt;允许我们在接口中定义static方法和default方法。&lt;/p&gt;
    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;JDK8Interface&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
 
  &lt;span class=&quot;c1&quot;&gt;// static修饰符定义静态方法&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;staticMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;接口中的静态方法&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
 
  &lt;span class=&quot;c1&quot;&gt;// default修饰符定义默认方法&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;defaultMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;接口中的默认方法&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;h3 id=&quot;反射&quot;&gt;反射&lt;/h3&gt;
    &lt;p&gt;Java反射机制是一个非常强大的功能, 在很多的项目比如Spring,Spring boot,Spring cloud等都可以看到反射的身影。通过反射机制，我们可以在运行期间获取对象的类型信息。利用这一点我们可以实现工厂模式和代理模式等设计模式，同时也可以解决Java泛型擦除等令人苦恼的问题。&lt;/p&gt;
    &lt;h4 id=&quot;java反射机制提供的功能&quot;&gt;Java反射机制提供的功能&lt;/h4&gt;
  &lt;/li&gt;
  &lt;li&gt;在运行时判断任意一个对象所属的类&lt;/li&gt;
  &lt;li&gt;在运行时构造任意一个类的对象&lt;/li&gt;
  &lt;li&gt;在运行时判断任意一个类所具有的成员变量和方法&lt;/li&gt;
  &lt;li&gt;在运行时调用任意一个对象的方法。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;反射让Java具有了动态的特效，这种机制运行程序在运行时通过反射API获取任意一个已知名称的类的内部信息，包括成员变量(fields)、方法(methods)、实现的接口 （interfaces）、Java语言修饰符（modifiers）以及他的父类（superclass）等等，并可在运行时改变成员变量的内容或调用方法.&lt;/p&gt;

&lt;h4 id=&quot;反射机制常用api&quot;&gt;反射机制常用API&lt;/h4&gt;
&lt;p&gt;在JDK中，提供了以下类来实现Java反射机制，这些类都位于java.lang.reflect包下：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Class类：代表一个类（注意：Class类位于java.lang包下）；&lt;/li&gt;
  &lt;li&gt;getDeclaredFields 返回一个Field类型的数组，包含此Class对象所表示的类或接口中声明的所有变量的Field对象。&lt;/li&gt;
  &lt;li&gt;getFields()：返回一个Field类型的数组，注意与Field[] getDeclaredFields()方法不同的是，此方法返回的是所有public变量对应的Field对象。&lt;/li&gt;
  &lt;li&gt;Field类：代表类的成员变量；&lt;/li&gt;
  &lt;li&gt;set()设置字段新值&lt;/li&gt;
  &lt;li&gt;Method类：代表类的方法；&lt;/li&gt;
  &lt;li&gt;invoke()执行方法&lt;/li&gt;
  &lt;li&gt;Constructor类：代表类的构造方法；&lt;/li&gt;
  &lt;li&gt;Array类：提供了动态创建数组，以及访问数组的元素的静态方法。
通过API提供的这些类里的方法，我们可以动态获取想要的类的内部信息。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;获取一个对象对应的反射类，在Java中有三种方法可以获取一个对象的反射类，&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;通过getClass()方法&lt;/li&gt;
  &lt;li&gt;通过Class.forName()方法；&lt;/li&gt;
  &lt;li&gt;使用类.class&lt;/li&gt;
  &lt;li&gt;通过类加载器实现，getClassLoader()
    &lt;h3 id=&quot;自定义注解的场景及实现&quot;&gt;自定义注解的场景及实现&lt;/h3&gt;
    &lt;p&gt;注解（annotation）是JDK5之后引进的新特性，是一种特殊的注释，之所以说它特殊是因为不同于普通注释（comment）能存在于源码，而且还能存在编译期跟运行期，会最终编译成一个.class文件，所以注解能有比普通注释更多的功能。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我们需要知道这些概念：
&lt;strong&gt;“普通注解”&lt;/strong&gt;只能用来注解&lt;strong&gt;“代码”&lt;/strong&gt;，而&lt;strong&gt;“元注解”&lt;/strong&gt;只能用来注解 &lt;strong&gt;“普通注解”。
自定义注解是&lt;/strong&gt;“普通注解”**。&lt;/p&gt;

&lt;p&gt;自定义注解
Jdk5支持的元注解有&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;@Decumented 被@Documented修饰的注解会生成到javadoc中&lt;/li&gt;
  &lt;li&gt;@Retention 可以设置注解的级别，分为三种&lt;/li&gt;
  &lt;li&gt;SOURCE 源码级别 注解只存在源码中 功能是于编译器交互，用于代码检测.如@Override,@SuppressWarings。
额外效率损耗发生在编译时&lt;/li&gt;
  &lt;li&gt;CLASS 字节码级别 注解存在源码与字节码文件中,主要用于编译时生成额外的文件，如XML，Java文件等，但运行时无法获得。这个级别需要添加JVM加载时候的代理（javaagent），使用代理来动态修改字节码文件&lt;/li&gt;
  &lt;li&gt;RUNTIME 运行时级别 注解存在源码，字节码与Java虚拟机中,主要用于运行时反射获取相关信息&lt;/li&gt;
  &lt;li&gt;@Target 可以限制注解的使用范围,比如我下边示例中显示只能在方法中使用该注解.&lt;/li&gt;
  &lt;li&gt;类，接口，注解;&lt;/li&gt;
  &lt;li&gt;属性域；&lt;/li&gt;
  &lt;li&gt;方法；&lt;/li&gt;
  &lt;li&gt;参数；&lt;/li&gt;
  &lt;li&gt;构造函数；&lt;/li&gt;
  &lt;li&gt;局部变量；&lt;/li&gt;
  &lt;li&gt;注解类型；&lt;/li&gt;
  &lt;li&gt;包&lt;/li&gt;
  &lt;li&gt;@Inherited 可以让注解类似被“继承”一样。
通过使用@Inherited，可以让子类对象使用getAnnotations()获取父类@Inherited修饰的注解。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;用于多数据源切换事务的自定义注解&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Retention&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RetentionPolicy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;RUNTIME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;  
&lt;span class=&quot;nd&quot;&gt;@Target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ElementType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;METHOD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;  
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MultiTransactional&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  
	&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{};&lt;/span&gt;  
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;http中的get和post请求方式区别&quot;&gt;HTTP中的GET和POST请求方式区别&lt;/h3&gt;

&lt;p&gt;| 参数|GET|POST|
|:—|:—|:—|
|传参|？后拼接即可|需要放到请求体中|
|浏览器缓存|可以|不可以|
|长度限制|&lt;strong&gt;HTTP协议对get方法本身没有限制，是特定的浏览器及服务器对它的限制，如IE是2083个字符,谷歌8182个字符。是对整个URI长度的限制&lt;/strong&gt;|&lt;strong&gt;HTTP协议对post方法也没有进行大小限制，起限制作用的服务器的处理能力。如tomcat下默认大小是2M&lt;/strong&gt;|
|类型限制|只允许ascii字符类型|没有限制。|
|参数可见性|是|否
|安全性|较低|比get请求高，但是也不安全|
|速度|GET产生一个TCP数据包|POST某些情况下产生两个TCP数据包&lt;strong&gt;(待验证,求帮助)&lt;/strong&gt;http://www.cnxct.com/use-get-for-ajax-requests-why/|
&lt;strong&gt;注意&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;GET与POST都有自己的语义，不能随便混用。&lt;/li&gt;
  &lt;li&gt;据研究，在网络环境好的情况下，发一次包的时间和发两次包的时间差别基本可以无视。而在网络环境差的情况下，两次包的TCP在验证数据包完整性上，有非常大的优点。&lt;/li&gt;
  &lt;li&gt;并不是所有浏览器都会在POST中发送两次包，Firefox就只发送一次&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;session和cookie&quot;&gt;Session和Cookie&lt;/h3&gt;
&lt;h4 id=&quot;前言&quot;&gt;前言&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;HTTP是一种无状态的协议，为了分辨连接到底是发谁的，需要自己去解决这个问题。不然即使是同一个网站每打开一个页面也都要登录一下。而Session和Cookie就是为了解决这个问题而提出来的两个机制
 #### 应用场景&lt;/li&gt;
  &lt;li&gt;登录网站，今天输入用户名和密码登录了，第二天再打开很多情况下就直接打开了。这个时候用到的一个机制就是Cookie&lt;/li&gt;
  &lt;li&gt;session的一个场景就是购物车，添加了商品之后客户端出可以知道添加了哪些商品，而服务器端如何判别呢？所以也需要存储一些信息就用到了session。
    &lt;h4 id=&quot;cookie&quot;&gt;Cookie&lt;/h4&gt;
  &lt;/li&gt;
  &lt;li&gt;通俗讲，是访问某些网站后存储在本地的相关信息，下次访问时减少一些步骤。更准确的说法是：Cookie是服务器在本地机器上存储的小段文本并随每一个请求发送至统一服务区，是在客户端保持状态的方案.&lt;/li&gt;
  &lt;li&gt;Cookie的主要内容包括：名字，值，过期时间，路径和域，key:value形式，过期时间可设置,作为请求头当中的一个header。
    &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;Cookie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;uuid_tt_dd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_6111924270&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1531479680889&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;602091&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dc_session_id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_1531479680889&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;529168&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;smidV2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20180727154724&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ecfd6d23eea7fb5921fbdc3a8dc089e1006d7027650647030&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Hm_ct_6bcd52f51e9b3dce32bec4a3997715ac&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1788&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;PC_VC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;UserName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;u014423442&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;UserInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;CWcVghsKizyabLSUr4USacuXHb7QxXpM50KlUm4FPGoyks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;FVKdGIDxKGYCFHRAed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;UserNick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=%&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;E5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;95&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;A6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;E5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;95&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;A6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;E6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;A5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;E5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;92&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;UN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;u014423442&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AU&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;E4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;BT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1536208658805&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;UserToken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;CWcVghsKizyabLSUr4USacuXHb7QxXpM50KlUm4FPGpyvxfYZNNLzP1PrUOC6eUjSx2TxI&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;BpcKccRH7HW4bBAPYz8mRWP1QNExiLrKgjL5LaLrf5laq04XM7Vl5kEkw5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Hm_lvt_6bcd52f51e9b3dce32bec4a3997715ac&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1537328104&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1537328236&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1537328482&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1537337918&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Hm_lpvt_6bcd52f51e9b3dce32bec4a3997715ac&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1537337918&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dc_tos&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pfahle&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;session特指web开发语境下的session&quot;&gt;Session(特指web开发语境下的session)&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;存在服务器的一种用来存放用户数据的ConcurrentHashMap数据结构&lt;/li&gt;
  &lt;li&gt;浏览器第一次发送请求时，服务器会自动生成一个唯一的sessionid()和对应的map,并将其通过响应发送到浏览器，也就是cookie中第一次设置sessionid,浏览器第二次发送请求会将前一次服务器响应中的SessionID放在请求中一并发送到服务器上，服务器从请求中提取Sessionid并查询到这个对应的map。&lt;/li&gt;
  &lt;li&gt;当用户在web间跳转时，存储在session对象中的变量不会丢失而是在整个用户会话中一直存在下去。
    &lt;h4 id=&quot;区别&quot;&gt;区别&lt;/h4&gt;
    &lt;p&gt;| 类型| Session| Cookie|
|:—|:—|:—|
|存储数据类型|任意的java对象|String类型的对象
|资源消耗|session过多时需要有专门的session服务器|无
|跨域问题|a.com的session无法再www.a.com中使用，解决办法使用JSONP或者设置cros（跨域资源共享）|无&lt;/p&gt;
    &lt;h4 id=&quot;分布式session&quot;&gt;分布式session&lt;/h4&gt;
    &lt;p&gt;存在的问题，session同步，session一致性&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;解决方案&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Session复制（同步）,相当于每台机器都拥有所有的session。&lt;/li&gt;
  &lt;li&gt;反向代理hash一致性，保证同一个请求落在同一台服务器上。&lt;/li&gt;
  &lt;li&gt;依赖第三方作为session共享的载体(如redis,memcached)，机器水平扩展，重启都不受任何影响,session也不会丢失.
个人建议第三种。
    &lt;h3 id=&quot;jdbc-流程&quot;&gt;JDBC 流程&lt;/h3&gt;
    &lt;h4 id=&quot;什么是jdbc&quot;&gt;什么是JDBC&lt;/h4&gt;
    &lt;p&gt;JDBC是一种用于执行sql语句的JavaAPI,可以为多种关系数据库提供统一访问，它由一组用Java语言编写的类和接口组成。JDBC提供了一种基准，据此可以构建更高级的工具和接口，使数据库开发人员能够编写数据库应用程序。&lt;/p&gt;
    &lt;h4 id=&quot;数据库驱动&quot;&gt;数据库驱动&lt;/h4&gt;
    &lt;p&gt;我们安装好数据库之后，我们的应用程序也是不能直接使用数据库的，必须要通过相应的数据库驱动程序去打交道。其实就是数据库厂商的JDBC接口实现，即对Connection等接口的实现类的jar文件。&lt;/p&gt;
    &lt;h4 id=&quot;jdbc流程&quot;&gt;JDBC流程&lt;/h4&gt;
    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//Driver类内部有个静态代码块&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  
      &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  
          &lt;span class=&quot;n&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;DriverManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;registerDriver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Driver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;  
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SQLException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  
          &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RuntimeException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Can't register driver!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
&lt;span class=&quot;c1&quot;&gt;//注册驱动，两种注册方式，第二种更优&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;DriverManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;registerDriver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Driver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//触发了两次静态代码块.&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;forName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;oracle.jdbc.driver.OracleDriver&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//在第一次加载jvm加载类的时候触发静态代码块&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//创建一个连接对象&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Connection&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DriverManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getConnection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;jdbc:mysql://localhost:3306/mydb&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;root&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;password&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//创建一个sql语句的发送命令对象,sql搬运工&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Statement&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createStatement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//执行sql,拿到查询结果集对象&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ResultSet&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;execteQuery&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;select * from tablename&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//输出结果集数据&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()){&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//关闭连接,从小到大 依次关闭, 防止内存泄漏&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;rs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;stmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;h3 id=&quot;mvc到前后端分离&quot;&gt;MVC到前后端分离&lt;/h3&gt;
    &lt;h4 id=&quot;理解mvc&quot;&gt;理解MVC&lt;/h4&gt;
    &lt;p&gt;MVC是一种经典的设计模式，全名为:Model-View-Controller.即 模型-视图-控制器&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;其中模型是用于封装数据的载体，例如，在Java中一般通过一个简单的POJO,简单的JAVA对象，实际就是普通的javaBeans,其中有一些属性及getter，setter方法，没有业务逻辑。&lt;/li&gt;
  &lt;li&gt;视图是更偏重于展现，也就是说，视图决定了界面到底长什么样子，在Java中可通过JSP来充当视图,或者纯HTML的方式进行展示，而后者才是目前的主流。&lt;/li&gt;
  &lt;li&gt;控制器是用来接收请求，处理业务逻辑，找到相对于的数据， 封装成model,传递模型到视图中进行展现
    &lt;h4 id=&quot;mvc的优点与不足&quot;&gt;MVC的优点与不足&lt;/h4&gt;
  &lt;/li&gt;
  &lt;li&gt;开发更加高效&lt;/li&gt;
  &lt;li&gt;减少代码耦合度&lt;/li&gt;
  &lt;li&gt;职责更清晰&lt;/li&gt;
  &lt;li&gt;视图渲染由服务器来完成。
    &lt;h4 id=&quot;新得开发需求&quot;&gt;新得开发需求&lt;/h4&gt;
    &lt;p&gt;随着不同终端的兴起(Pad/Mobile/PC)，对开发人员的要求越来越高，纯浏览器端的响应已经不能满足用户体验的高要求，我们往往需要针对不同得终端开发定制版本，为了提升开发效率，前后端分离的需求越来越被重视，后端负责业务/数据接口，前端负责展示/交互逻辑,同一份数据接口，我们可以定制开发多个版本.&lt;/p&gt;
    &lt;h4 id=&quot;什么是前后端分离&quot;&gt;什么是前后端分离&lt;/h4&gt;
    &lt;p&gt;比较认同的一种观点是SPA（单页Web应用（single page web application，SPA），就是只有一张Web页面的应用，是加载单个HTML 页面并在用户与应用程序交互时动态更新该页面的Web应用程序。），所用到的展现数据都是后端通过异步接口(ajax/jsonp)的方式提供的，前端只管展现.
从某种意义上来说，SPA确实做到了前后端分离，但这种方式存在两个问题：&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;WEB服务中，SPA类占的比例很少，很多场景下还有同步/同步+异步混合的模式,SPA不能作为一种通用的解决方案.&lt;/li&gt;
  &lt;li&gt;现阶段的SPA开发模式，接口通常是按照展现逻辑来提供的，有时候为了提供效率，后端会帮着处理一些展现逻辑，着就意味着后端还是涉足了VIEW层的工作，不是真正的前后端分离。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;目前从事APP后端开发，对于前后端分离的深刻理解是这样的：前端开发(node)=IOS开发(ios)=Android开发(android)。关于web得研发模型的演进更多信息请移步&lt;strong&gt;玉伯老师博客&lt;/strong&gt;  https://github.com/lifesinger/blog/issues/184&lt;/p&gt;
&lt;h3 id=&quot;equals-与--的区别&quot;&gt;equals 与 == 的区别&lt;/h3&gt;
&lt;p&gt;其实没区别，判断两个对象是否相等
使用==比较原生类型如：boolean、int、char等等，使用equals()比较对象。
==返回true如果两个引用指向相同的对象，equals()的返回结果依赖于具体业务实现（重写equals方法）
字符串的对比使用equals()代替==操作符(字符串属于对象，看第一条)&lt;/p&gt;

&lt;h2 id=&quot;集合&quot;&gt;集合&lt;/h2&gt;
&lt;p&gt;容器继承关系图(看懂了再往下看)
&lt;img src=&quot;./1537437731498.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;list-和-set-区别&quot;&gt;List 和 Set 区别&lt;/h3&gt;

&lt;h3 id=&quot;表格&quot;&gt;表格&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Item&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Value&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Qty&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Computer&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;1600 USD&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Phone&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;12 USD&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;12&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Pipe&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;1 USD&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;234&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;</content><author><name>杨俊飞</name></author><category term="复习" /><summary type="html">java复习手册 @(工作)[基本功, 集合, 线程, 锁机制, 数据存储, 缓存, 消息队列] [TOC] 基本功 面向对象的特征 封装 概念 将类的信息隐藏在类内部,不允许外部程序直接访问 通过该类提供的方法在实现对隐藏信息的操作和访问 隐藏对象的信息 留出访问的接口 代码实现 属性前+private访问修饰符:该属性只能在当前类内部访问 在类外对private属性访问需要:创建getter/setter操作接口取值和赋值 eclipse自动生成get/set方法：右键，source-&amp;gt;generate getters and setters 继承 概念 继承即常说的is-a的关系。子类继承父类，表明子类是一种特殊的父类，并且具有父类所没有的一些属性和方法。 特点 子类拥有父类非private的属性和方法 子类可以拥有自己的属性和方法，即子类可以对父类进行扩展 子类可以用自己的方式实现父类的方法 对于构造器而言，子类会默认调用父类的构造器，但是如果没有默认的父类构造器，子类必须要显示的指定父类的构造器，而且必须是在子类构造器中做的第一件事(第一行代码)：super() 将子类转换成父类，在继承关系上面是向上移动的，所以一般称之为向上转型 慎用继承 父类变，子类就必须变 继承破坏了封装，对于父类而言，它的实现细节对于子类来说都是透明的 继承是一种强耦合关系 那么到底要不要使用继承呢？《Think in java》中提供了解决办法：问一问自己是否需要从子类向父类进行向上转型。如果必须向上转型，则继承是必要的，但是如果不需要，则应当好好考虑自己是否需要继承。 多态 概念 多态是同一个行为具有多个不同表现形式。ps：封装和继承都是为多态而准备的 两种多态 编译时多态：方法的重载; 运行时多态：JAVA运行时系统根据该方法的实例的类型来决定调用哪个方法则被称为运行时多态,同一个接口，使用不同的实例而执行不同操作，如图所示： 运行时多态的作用 消除类型之间的耦合关系(简单地说就是，没有多态，那么等号左边是啥右边就得是啥，这就叫耦合，有了多态，左边是父类（或者接口），右边是子类（或实现类），我只管调用接口里面的方法就是了，至于你实现类怎么去实现，那是你的事，你要修改一下实现，你只管去把实现类换掉，我这边一行代码都不用变，这就解耦了) 多态的好处 可替换性 可扩充性 接口性 灵活性 简化性 存在多态的必要条件 继承 重写 final,finally,finalize的区别 final final修饰符,也是关键字。 修饰的类不能被继承 修饰的变量或者方法在使用的过程中不被修改(如果修饰引用类型，那么引用的对象是可以被修改的,引用本身不可修改)、被覆盖（类中所有的private方法都隐式的指定为final。） finally -异常块儿中无论异常是否捕获，都一定会发生的代码块儿. finallieze -jvm清理某个对象时会触发的一个方法。 int 和 Integer 有什么区别 int是原始类型,Integer是包装类型,是个对象 int初始化0；Integer初始化null 无论如何，Integer与new Integer()不会相等 两个都是非new出来的Integer，如果数在-128到127之间，则是true,否则为false int和integer(无论new否)比，都为true，因为会把Integer自动拆箱为int再去比 重载和重写的区别 重载是在同一个类中的两个或两个以上的方法，拥有相同的方法名，但是参数却不相同，方法体也不相同，最常见的重载的例子就是类的构造函数 重写发生在两个类中，在子类中把父类本身有的方法重新写一遍。 抽象类和接口有什么区别 |参数|抽象类|接口| |:—–| :—–| :—– | | 默认的方法实现| 它可以有默认的方法实现|接口完全是抽象的。它根本不存在方法的实现 | | 实现|子类使用extends关键字来继承抽象类。如果子类不是抽象类的话，它需要提供抽象类中所有声明的方法的实现。|子类使用关键字implements来实现接口。它需要提供接口中所有声明的方法的实现| | 构造器|抽象类可以有构造器|接口不能有构造器| |与正常java类的区别|除了不能实例化抽象类之外没有任何区别|接口是完全不同的类型| |访问修饰符|抽象方法可以有public、protected和default,private修饰后子类看不到啊。|接口默认修饰符是public,你不可以使用其他修饰符抱歉！| |main方法|抽象方法可以有main方法并且我们可以运行它| 接口没有main方法，因此我们不能运行它| |多继承|抽象方法可以继承一个类和实现多个接口|接口只可以继承一个或多个其它接口| |速度|它比接口速度要快|接口是稍微有点慢的，因为它需要时间去寻找在类中实现的方法。| |添加新方法|如果你往抽象类中添加新的方法，你可以给它提供默认的实现。因此你不需要改变你现在的代码。|如果你往接口中添加方法，那么你必须改变实现该接口的类。| 什么时候使用抽象类或者接口? 如果你拥有一些方法并且想让它们中的一些有默认实现，那么使用抽象类吧。 如果你想实现多重继承，那么你必须使用接口。由于Java不支持多继承，子类不能够继承多个类，但可以实现多个接口。因此你就可以使用接口来解决它。 如果基本功能在不断改变，那么就需要使用抽象类。如果不断改变基本功能并且使用接口，那么就需要改变所有实现了该接口的类。 JDK8接口增强 允许我们在接口中定义static方法和default方法。 public interface JDK8Interface { // static修饰符定义静态方法 static void staticMethod() { System.out.println(&quot;接口中的静态方法&quot;); } // default修饰符定义默认方法 default void defaultMethod() { System.out.println(&quot;接口中的默认方法&quot;); } } 反射 Java反射机制是一个非常强大的功能, 在很多的项目比如Spring,Spring boot,Spring cloud等都可以看到反射的身影。通过反射机制，我们可以在运行期间获取对象的类型信息。利用这一点我们可以实现工厂模式和代理模式等设计模式，同时也可以解决Java泛型擦除等令人苦恼的问题。 Java反射机制提供的功能 在运行时判断任意一个对象所属的类 在运行时构造任意一个类的对象 在运行时判断任意一个类所具有的成员变量和方法 在运行时调用任意一个对象的方法。 反射让Java具有了动态的特效，这种机制运行程序在运行时通过反射API获取任意一个已知名称的类的内部信息，包括成员变量(fields)、方法(methods)、实现的接口 （interfaces）、Java语言修饰符（modifiers）以及他的父类（superclass）等等，并可在运行时改变成员变量的内容或调用方法. 反射机制常用API 在JDK中，提供了以下类来实现Java反射机制，这些类都位于java.lang.reflect包下： Class类：代表一个类（注意：Class类位于java.lang包下）； getDeclaredFields 返回一个Field类型的数组，包含此Class对象所表示的类或接口中声明的所有变量的Field对象。 getFields()：返回一个Field类型的数组，注意与Field[] getDeclaredFields()方法不同的是，此方法返回的是所有public变量对应的Field对象。 Field类：代表类的成员变量； set()设置字段新值 Method类：代表类的方法； invoke()执行方法 Constructor类：代表类的构造方法； Array类：提供了动态创建数组，以及访问数组的元素的静态方法。 通过API提供的这些类里的方法，我们可以动态获取想要的类的内部信息。 获取一个对象对应的反射类，在Java中有三种方法可以获取一个对象的反射类， 通过getClass()方法 通过Class.forName()方法； 使用类.class 通过类加载器实现，getClassLoader() 自定义注解的场景及实现 注解（annotation）是JDK5之后引进的新特性，是一种特殊的注释，之所以说它特殊是因为不同于普通注释（comment）能存在于源码，而且还能存在编译期跟运行期，会最终编译成一个.class文件，所以注解能有比普通注释更多的功能。 我们需要知道这些概念： “普通注解”只能用来注解“代码”，而“元注解”只能用来注解 “普通注解”。 自定义注解是“普通注解”**。 自定义注解 Jdk5支持的元注解有 @Decumented 被@Documented修饰的注解会生成到javadoc中 @Retention 可以设置注解的级别，分为三种 SOURCE 源码级别 注解只存在源码中 功能是于编译器交互，用于代码检测.如@Override,@SuppressWarings。 额外效率损耗发生在编译时 CLASS 字节码级别 注解存在源码与字节码文件中,主要用于编译时生成额外的文件，如XML，Java文件等，但运行时无法获得。这个级别需要添加JVM加载时候的代理（javaagent），使用代理来动态修改字节码文件 RUNTIME 运行时级别 注解存在源码，字节码与Java虚拟机中,主要用于运行时反射获取相关信息 @Target 可以限制注解的使用范围,比如我下边示例中显示只能在方法中使用该注解. 类，接口，注解; 属性域； 方法； 参数； 构造函数； 局部变量； 注解类型； 包 @Inherited 可以让注解类似被“继承”一样。 通过使用@Inherited，可以让子类对象使用getAnnotations()获取父类@Inherited修饰的注解。 用于多数据源切换事务的自定义注解 @Retention(RetentionPolicy.RUNTIME) @Target({ElementType.METHOD}) public @interface MultiTransactional { String[] values() default {}; } HTTP中的GET和POST请求方式区别 | 参数|GET|POST| |:—|:—|:—| |传参|？后拼接即可|需要放到请求体中| |浏览器缓存|可以|不可以| |长度限制|HTTP协议对get方法本身没有限制，是特定的浏览器及服务器对它的限制，如IE是2083个字符,谷歌8182个字符。是对整个URI长度的限制|HTTP协议对post方法也没有进行大小限制，起限制作用的服务器的处理能力。如tomcat下默认大小是2M| |类型限制|只允许ascii字符类型|没有限制。| |参数可见性|是|否 |安全性|较低|比get请求高，但是也不安全| |速度|GET产生一个TCP数据包|POST某些情况下产生两个TCP数据包(待验证,求帮助)http://www.cnxct.com/use-get-for-ajax-requests-why/| 注意 GET与POST都有自己的语义，不能随便混用。 据研究，在网络环境好的情况下，发一次包的时间和发两次包的时间差别基本可以无视。而在网络环境差的情况下，两次包的TCP在验证数据包完整性上，有非常大的优点。 并不是所有浏览器都会在POST中发送两次包，Firefox就只发送一次 Session和Cookie 前言 HTTP是一种无状态的协议，为了分辨连接到底是发谁的，需要自己去解决这个问题。不然即使是同一个网站每打开一个页面也都要登录一下。而Session和Cookie就是为了解决这个问题而提出来的两个机制 #### 应用场景 登录网站，今天输入用户名和密码登录了，第二天再打开很多情况下就直接打开了。这个时候用到的一个机制就是Cookie session的一个场景就是购物车，添加了商品之后客户端出可以知道添加了哪些商品，而服务器端如何判别呢？所以也需要存储一些信息就用到了session。 Cookie 通俗讲，是访问某些网站后存储在本地的相关信息，下次访问时减少一些步骤。更准确的说法是：Cookie是服务器在本地机器上存储的小段文本并随每一个请求发送至统一服务区，是在客户端保持状态的方案. Cookie的主要内容包括：名字，值，过期时间，路径和域，key:value形式，过期时间可设置,作为请求头当中的一个header。 Cookie: uuid_tt_dd=10_6111924270-1531479680889-602091; dc_session_id=10_1531479680889.529168; smidV2=20180727154724ecfd6d23eea7fb5921fbdc3a8dc089e1006d7027650647030; Hm_ct_6bcd52f51e9b3dce32bec4a3997715ac=1788*1*PC_VC; UserName=u014423442; UserInfo=CWcVghsKizyabLSUr4USacuXHb7QxXpM50KlUm4FPGoyks%2FVKdGIDxKGYCFHRAed; UserNick=%E5%95%A6%E5%95%A6%E6%9D%A5%E5%92%AF; UN=u014423442; AU=6E4; BT=1536208658805; UserToken=CWcVghsKizyabLSUr4USacuXHb7QxXpM50KlUm4FPGpyvxfYZNNLzP1PrUOC6eUjSx2TxI%2BpcKccRH7HW4bBAPYz8mRWP1QNExiLrKgjL5LaLrf5laq04XM7Vl5kEkw5; Hm_lvt_6bcd52f51e9b3dce32bec4a3997715ac=1537328104,1537328236,1537328482,1537337918; Hm_lpvt_6bcd52f51e9b3dce32bec4a3997715ac=1537337918; dc_tos=pfahle Session(特指web开发语境下的session) 存在服务器的一种用来存放用户数据的ConcurrentHashMap数据结构 浏览器第一次发送请求时，服务器会自动生成一个唯一的sessionid()和对应的map,并将其通过响应发送到浏览器，也就是cookie中第一次设置sessionid,浏览器第二次发送请求会将前一次服务器响应中的SessionID放在请求中一并发送到服务器上，服务器从请求中提取Sessionid并查询到这个对应的map。 当用户在web间跳转时，存储在session对象中的变量不会丢失而是在整个用户会话中一直存在下去。 区别 | 类型| Session| Cookie| |:—|:—|:—| |存储数据类型|任意的java对象|String类型的对象 |资源消耗|session过多时需要有专门的session服务器|无 |跨域问题|a.com的session无法再www.a.com中使用，解决办法使用JSONP或者设置cros（跨域资源共享）|无 分布式session 存在的问题，session同步，session一致性 解决方案 Session复制（同步）,相当于每台机器都拥有所有的session。 反向代理hash一致性，保证同一个请求落在同一台服务器上。 依赖第三方作为session共享的载体(如redis,memcached)，机器水平扩展，重启都不受任何影响,session也不会丢失. 个人建议第三种。 JDBC 流程 什么是JDBC JDBC是一种用于执行sql语句的JavaAPI,可以为多种关系数据库提供统一访问，它由一组用Java语言编写的类和接口组成。JDBC提供了一种基准，据此可以构建更高级的工具和接口，使数据库开发人员能够编写数据库应用程序。 数据库驱动 我们安装好数据库之后，我们的应用程序也是不能直接使用数据库的，必须要通过相应的数据库驱动程序去打交道。其实就是数据库厂商的JDBC接口实现，即对Connection等接口的实现类的jar文件。 JDBC流程 //Driver类内部有个静态代码块 static { try { java.sql.DriverManager.registerDriver(new Driver()); } catch (SQLException E) { throw new RuntimeException(&quot;Can't register driver!&quot;); } } //注册驱动，两种注册方式，第二种更优 DriverManager.registerDriver(new Driver())//触发了两次静态代码块. class.forName(&quot;oracle.jdbc.driver.OracleDriver&quot;);//在第一次加载jvm加载类的时候触发静态代码块 //创建一个连接对象 Connection conn= DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/mydb&quot;,&quot;root&quot;,&quot;password&quot;) //创建一个sql语句的发送命令对象,sql搬运工 Statement stmt=conn.createStatement(); //执行sql,拿到查询结果集对象 ResultSet rs=stmt.execteQuery(&quot;select * from tablename&quot;); //输出结果集数据 while(rs.next()){ log.info(rs.getInt(&quot;id&quot;)) } //关闭连接,从小到大 依次关闭, 防止内存泄漏 rs.close(); stmt.close(); conn.close(); MVC到前后端分离 理解MVC MVC是一种经典的设计模式，全名为:Model-View-Controller.即 模型-视图-控制器 其中模型是用于封装数据的载体，例如，在Java中一般通过一个简单的POJO,简单的JAVA对象，实际就是普通的javaBeans,其中有一些属性及getter，setter方法，没有业务逻辑。 视图是更偏重于展现，也就是说，视图决定了界面到底长什么样子，在Java中可通过JSP来充当视图,或者纯HTML的方式进行展示，而后者才是目前的主流。 控制器是用来接收请求，处理业务逻辑，找到相对于的数据， 封装成model,传递模型到视图中进行展现 MVC的优点与不足 开发更加高效 减少代码耦合度 职责更清晰 视图渲染由服务器来完成。 新得开发需求 随着不同终端的兴起(Pad/Mobile/PC)，对开发人员的要求越来越高，纯浏览器端的响应已经不能满足用户体验的高要求，我们往往需要针对不同得终端开发定制版本，为了提升开发效率，前后端分离的需求越来越被重视，后端负责业务/数据接口，前端负责展示/交互逻辑,同一份数据接口，我们可以定制开发多个版本. 什么是前后端分离 比较认同的一种观点是SPA（单页Web应用（single page web application，SPA），就是只有一张Web页面的应用，是加载单个HTML 页面并在用户与应用程序交互时动态更新该页面的Web应用程序。），所用到的展现数据都是后端通过异步接口(ajax/jsonp)的方式提供的，前端只管展现. 从某种意义上来说，SPA确实做到了前后端分离，但这种方式存在两个问题： WEB服务中，SPA类占的比例很少，很多场景下还有同步/同步+异步混合的模式,SPA不能作为一种通用的解决方案. 现阶段的SPA开发模式，接口通常是按照展现逻辑来提供的，有时候为了提供效率，后端会帮着处理一些展现逻辑，着就意味着后端还是涉足了VIEW层的工作，不是真正的前后端分离。 目前从事APP后端开发，对于前后端分离的深刻理解是这样的：前端开发(node)=IOS开发(ios)=Android开发(android)。关于web得研发模型的演进更多信息请移步玉伯老师博客 https://github.com/lifesinger/blog/issues/184 equals 与 == 的区别 其实没区别，判断两个对象是否相等 使用==比较原生类型如：boolean、int、char等等，使用equals()比较对象。 ==返回true如果两个引用指向相同的对象，equals()的返回结果依赖于具体业务实现（重写equals方法） 字符串的对比使用equals()代替==操作符(字符串属于对象，看第一条) 集合 容器继承关系图(看懂了再往下看) List 和 Set 区别 表格 Item Value Qty Computer 1600 USD 5 Phone 12 USD 12 Pipe 1 USD 234</summary></entry><entry><title type="html">Welcome to Jekyll!</title><link href="http://0.0.0.0:8080/2018/05/17/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2018-05-17T14:05:21+08:00</published><updated>2018-05-17T14:05:21+08:00</updated><id>http://0.0.0.0:8080/2018/05/17/welcome-to-jekyll</id><content type="html" xml:base="http://0.0.0.0:8080/2018/05/17/welcome-to-jekyll.html">&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;</content><author><name>true</name></author><category term="jekyll" /><category term="update" /><summary type="html">You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.</summary></entry><entry><title type="html">Hello Jekyll</title><link href="http://0.0.0.0:8080/2017/04/18/hello-jekyll.html" rel="alternate" type="text/html" title="Hello Jekyll" /><published>2017-04-18T00:00:00+08:00</published><updated>2017-04-18T00:00:00+08:00</updated><id>http://0.0.0.0:8080/2017/04/18/hello-jekyll</id><content type="html" xml:base="http://0.0.0.0:8080/2017/04/18/hello-jekyll.html">&lt;blockquote&gt;
  &lt;p&gt;Transform your plain text into static websites and blogs.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;welcome&quot;&gt;Welcome&lt;/h1&gt;

&lt;h2 id=&quot;welcome-1&quot;&gt;Welcome&lt;/h2&gt;

&lt;h3 id=&quot;welcome-2&quot;&gt;Welcome&lt;/h3&gt;

&lt;p&gt;This site aims to be a comprehensive guide to Jekyll. We’ll cover topics such as getting your site up and running, creating and managing your content, customizing the way your site works and looks, deploying to various environments, and give you some advice on participating in the future development of Jekyll itself.&lt;/p&gt;

&lt;h3 id=&quot;so-what-is-jekyll-exactlypermalink&quot;&gt;So what is Jekyll, exactly?Permalink&lt;/h3&gt;

&lt;p&gt;Jekyll is a simple, blog-aware, static site generator. It takes a template directory containing raw text files in various formats, runs it through a converter (like &lt;a href=&quot;https://daringfireball.net/projects/markdown/&quot;&gt;Markdown&lt;/a&gt;) and our &lt;a href=&quot;https://github.com/Shopify/liquid/wiki&quot;&gt;Liquid&lt;/a&gt; renderer, and spits out a complete, ready-to-publish static website suitable for serving with your favorite web server. Jekyll also happens to be the engine behind GitHub Pages, which means you can use Jekyll to host your project’s page, blog, or website from GitHub’s servers for free.&lt;/p&gt;

&lt;h3 id=&quot;helpful-hintspermalink&quot;&gt;Helpful HintsPermalink&lt;/h3&gt;

&lt;p&gt;Throughout this guide there are a number of small-but-handy pieces of information that can make using Jekyll easier, more interesting, and less hazardous. Here’s what to look out for.&lt;/p&gt;

&lt;h3 id=&quot;video-test&quot;&gt;Video Test&lt;/h3&gt;

&lt;iframe type=&quot;text/html&quot; width=&quot;100%&quot; height=&quot;385&quot; src=&quot;http://www.youtube.com/embed/gfmjMWjn-Xg&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;</content><author><name>Jekyll</name></author><category term="jekyll" /><summary type="html">Transform your plain text into static websites and blogs. Welcome Welcome Welcome This site aims to be a comprehensive guide to Jekyll. We’ll cover topics such as getting your site up and running, creating and managing your content, customizing the way your site works and looks, deploying to various environments, and give you some advice on participating in the future development of Jekyll itself. So what is Jekyll, exactly?Permalink Jekyll is a simple, blog-aware, static site generator. It takes a template directory containing raw text files in various formats, runs it through a converter (like Markdown) and our Liquid renderer, and spits out a complete, ready-to-publish static website suitable for serving with your favorite web server. Jekyll also happens to be the engine behind GitHub Pages, which means you can use Jekyll to host your project’s page, blog, or website from GitHub’s servers for free. Helpful HintsPermalink Throughout this guide there are a number of small-but-handy pieces of information that can make using Jekyll easier, more interesting, and less hazardous. Here’s what to look out for. Video Test</summary></entry></feed>